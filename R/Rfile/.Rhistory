if(var1%%idx == 0) {
count = count+1
}
}
if(count==0) {
print(var1)
}
}
# 1~100 prime number=> 소수 구하기
n <- 10
i <- 2
count <- 0
for(var1 in seq(i, n)) {
div=var1%/%2
# var1을 2~div로 나눠
# 나머지가 0이면 출력
count=0
for(idx in seq(2, div)) {
if(var1%%idx == 0) {
count = count+1
}
}
if(count==0) {
print(var1)
}
}
i <- 1
count <- 0
for(var1 in seq(i, n)) {
div=var1%/%2
# var1을 2~div로 나눠
# 나머지가 0이면 출력
count=0
for(idx in seq(2, div)) {
if(var1%%idx == 0) {
count = count+1
}
}
if(count==0) {
print(var1)
}
}
# 1~100 prime number=> 소수 구하기
n <- 20
i <- 2
count <- 0
for(var1 in seq(i, n)) {
div=var1%/%2
# var1을 2~div로 나눠
# 나머지가 0이면 출력
count=0
for(idx in seq(2, div)) {
if(var1%%idx == 0) {
count = count+1
}
}
if(count==0) {
print(var1)
}
}
# 1~100 prime number=> 소수 구하기
n <- 100
i <- 2
count <- 0
for(var1 in seq(i, n)) {
div=var1%/%2
# var1을 2~div로 나눠
# 나머지가 0이면 출력
count=0
for(idx in seq(2, div)) {
if(var1%%idx == 0) {
count = count+1
}
}
if(count==0) {
print(var1)
}
}
2%/%2
for(var1 in seq(i, n)) {
div=var1%/%2
# var1을 2~div로 나눠
# 나머지가 0이면 출력
count=0
for(idx in seq(div, var1-1)) {
if(var1%%idx == 0) {
count = count+1
}
}
if(count==0) {
print(var1)
}
}
for(var1 in seq(i, n)) {
div=var1%/%2
# var1을 2~div로 나눠
# 나머지가 0이면 출력
count=0
for(idx in seq(div+1, var1-1)) {
if(var1%%idx == 0) {
count = count+1
}
}
if(count==0) {
print(var1)
}
}
for(var1 in seq(i, n)) {
div=var1%/%2
# var1을 2~div로 나눠
# 나머지가 0이면 출력
count=0
for(idx in seq(div, var1-1)) {
if(var1%%idx == 0) {
count = count+1
}
}
if(count==0) {
print(var1)
}
}
for(var1 in seq(i, n)) {
div=var1%/%2
# var1을 2~div로 나눠
# 나머지가 0이면 출력
count=0
for(idx in seq(2, div)) {
if(var1%%idx == 0) {
count = count+1
}
}
if(count==0) {
print(var1)
}
}
seq(2, div)
seq(2, 1)
for(var1 in seq(i, n)) {
div=var1%/%2
count=0
if(div>1) {
for(idx in seq(2, div)) {
if(var1%%idx == 0) {
count = count+1
}
}
}
if(count==0) {
print(var1)
}
}
######################################################
# 1. Github에 공유되어있는 ggmap package 설치해야 험
# 버전특성을 탐
# package들은 dependency(의존성)에 신경써야 함
sessionInfo() # 현재 R ver 확인: 3.6.1
# 2. package를 사용하기 위해 loading작업필요
library(jsonlite)
# 3. 문자열 처리하기 위한 package loading
library(stringr)
install.packages(c("httr", "jsonlite", "RSelenium", "rvest", "stringr"))
install.packages(c("dplyr", "reshape2", "stringr", "xlsx"))
setwd("C:\\R_Lecture\\Rfile")
install.packages("devtools")
library(devtools)
install.github("dkahle/ggmap") # 이용하려면 devtools 패키지 설치해야 함
install_github("dkahle/ggmap") # 이용하려면 devtools 패키지 설치해야 함
library(dkahle/ggmap)
library(ggmap)
ggmap
# 구글 api key
googleAPIKey<-"AIzaSyDb8Oqv9AqTVBFWUKyOZh1SkSv_9SeEtKI"
# 구글 키 이용해서 인증 받아야 함
register_google(key=googleAPIKey)
gg_seoul
gg_seoul <- get_googlemap()
gg_seoul <- get_googlemap("seoul")
gg_seoul <- get_googlemap("seoul", googleAPIKey)
gg_seoul <- get_googlemap("seoul", map)
gg_seoul <- get_googlemap("seoul",
maptype = "zoom")
gg_seoul <- get_googlemap("seoul",
maptype = "hybrid")
gg_seoul
ggmap(gg_seoul)
gg_seoul <- get_googlemap("seoul",
maptype = "satellite",)
ggmap(gg_seoul)
#########
library(dplyr)
library(ggplot2)
geo_code = geocode("공덕역")
geo_code
geo_code = as.data.frame(geocode("공덕역"))
geo_code
geo_code = as.data.frame(geocode(enc2utf8("공덕역")))
geo_code
class(geo_code)
geo_code = as.vector(geocode(enc2utf8("공덕역")))
geo_code
# google map을 그리려면 위도 경도가 숫자형태의 벡터로 되어 있어야 함
geo_data = as.numeric(geo_code)
geo_data
geo_code = geocode(enc2utf8("공덕역"))
geo_code
# google map을 그리려면 위도 경도가 숫자형태의 벡터로 되어 있어야 함
geo_data = as.numeric(geo_code)
geo_data
get_googlemap(center=geo_data, # 해당 위도경도를 가운데로
maptype = "satellite",
zoom=13)
get_googlemap(center=geo_data, # 해당 위도경도를 가운데로
maptype = "satellite",
zoom=13) %>%
ggmap()
get_googlemap(center=geo_data, # 해당 위도경도를 가운데로
maptype = "roadmap",
zoom=13) %>%
ggmap()
get_googlemap(center=geo_data, # 해당 위도경도를 가운데로
maptype = "roadmap",
zoom=16) %>%
ggmap()
get_googlemap(center=geo_data, # 해당 위도경도를 가운데로
maptype = "roadmap",
zoom=18) %>%
ggmap()
get_googlemap(center=geo_data, # 해당 위도경도를 가운데로
maptype = "roadmap",
zoom=16) %>%
ggmap() +
geom_point(geo_data)
get_googlemap(center=geo_data, # 해당 위도경도를 가운데로
maptype = "roadmap",
zoom=16) %>%
ggmap() +
geom_point(data=geo_data)
get_googlemap(center=geo_data, # 해당 위도경도를 가운데로
maptype = "roadmap",
zoom=16) %>%
ggmap() +
geom_point(geo_data,
aes(x=lon, y=lat))
get_googlemap(center=geo_data, # 해당 위도경도를 가운데로
maptype = "roadmap",
zoom=16) %>%
ggmap() +
geom_point(geo_data,
aes(x=lon, y=lat),
size=5,
color="red")
get_googlemap(center=geo_data, # 해당 위도경도를 가운데로
maptype = "roadmap",
zoom=16) %>%
ggmap() +
geom_point(geo_code,
aes(x=lon, y=lat),
size=5,
color="red")
get_googlemap(center=geo_data, # 해당 위도경도를 가운데로
maptype = "roadmap",
zoom=16) %>%
ggmap() +
geom_point(data = geo_code,
aes(x=lon, y=lat),
size=5,
color="red")
geocode(enc2utf8(addr))
addr <- c("공덕역","역삼역")
geocode(enc2utf8(addr))
as.numeric(gc)
gc <- geocode(enc2utf8(addr))
df <- data.frame(lon=gc$lon, lat=gc$lat)
df
gc
cen <- c(mean(df$lon), mean(df$lat))
cen
get_googlemap(center = cen,
maptype="roadmap",
zoom = 13,
markers = gc)
get_googlemap(center = cen,
maptype="roadmap",
zoom = 13,
markers = gc) %>%
ggmap()
get_googlemap(center = cen,
maptype="roadmap",
zoom = 13,
markers = df) %>%
ggmap()
install.packages("lubridate")
# zoom
# interactive
install.packages("plotly")
library(plotly)
# mpg data set을 이용하여 배기량과 고속도로 연비에 대한 산점도 그리기
mpg
df <- as.data.frame(mpg)
head(df)
ggplot(df,
aes(x=dspl,
y=hwy)) +
geom_point()
ggplot(df,
aes(x=displ,
y=hwy)) +
geom_point()
ggplot(df,
aes(x=displ,
y=hwy)) +
geom_point(point=3, col="blue")
g <- ggplot(df,
aes(x=displ,
y=hwy)) +
geom_point(point=3, col="blue")
ggplotly(g)
g <- ggplot(df,
aes(x=displ,
y=hwy)) +
geom_point(size=3, col="blue")
ggplotly(g)
addr <- c("공덕역","역삼역")
gc <- geocode(enc2utf8(addr))
# as.data.type == ?
df <- data.frame(lon=gc$lon, lat=gc$lat)
cen <- c(mean(df$lon), mean(df$lat))
get_googlemap(center = cen,
maptype="roadmap",
zoom = 13,
markers = df) %>%
ggmap()
ggplotly(result)
result <-get_googlemap(center = cen,
maptype="roadmap",
zoom = 13,
markers = df) %>%
ggmap()
ggplotly(result)
ggplotly(result)
install.packages("dyfraphs")
library(dygraphs)
install.packages("dygraphs")
library(dygraphs)
# 데이터르를 xts라는 형식으로 변환시켜줘야
# 시간에 따른 개인 저축를 변환 추이를선 그래프로 그림
ggplot(ecovomocs,
aes(x=date,
y=psavert)) +
geom_line()
# 데이터르를 xts라는 형식으로 변환시켜줘야
# 시간에 따른 개인 저축를 변환 추이를선 그래프로 그림
ggplot(economics,
aes(x=date,
y=psavert)) +
geom_line()
save_ratye <- xts()
save_ratye <- xts(economics$psavert, # 데이터 형태 변환
order.by =economics$date)
save_rate <- xts(economics$psavert, # 데이터 형태 변환
order.by =economics$date)
library(dygraphs)
# 데이터르를 xts라는 형식으로 변환시켜줘야
# 시간에 따른 개인 저축를 변환 추이를선 그래프로 그림
ggplot(economics,
aes(x=date,
y=psavert)) +
geom_line()
save_rate <- xts(economics$psavert, # 데이터 형태 변환
order.by =economics$date)
library(xts)
save_rate <- xts(economics$psavert, # 데이터 형태 변환
order.by =economics$date)
head(save_ratye)
head(save_rate)
dygraph(save_rate)
dygraph(save_rate)
dygraph(save_rate) %>%
dyRangeSelector()
unemp_rate <- xts(economics$psavert, # 데이터 형태 변환
order.by =economics$date)
unemp_rate <- xts(economics$umemploy, # 데이터 형태 변환
order.by =economics$date)
unemp_rate <- xts(economics$unemploy, # 데이터 형태 변환
order.by =economics$date)
dygraph(unemp_rate) %>%
dyRangeSelector()
unemp_save <- cbind(save_rate,unemp_rate)
unemp_save
unemp_rate <- xts(economics$unemploy/1000, # 데이터 형태 변환
order.by =economics$date)
unemp_save <- cbind(save_rate,unemp_rate)
unemp_save
unemp_save <- cbind(save_rate,unemp_rate)
dygraph(unemp_rate) %>%
dyRangeSelector()
dygraph(unemp_save) %>%
dyRangeSelector()
# 2. R에서 DBMS에 접근하려면 몇 개의 패지기가 필요
# Java 언어 이용 => Java 설치되어 있어야 함
# JAVA_HOME 환경변수도 잡아줘야 함
install.packages("rJava")
library(rJava)
# -
install.packages("RJDBC")
library(RJDBC)
# -
install.packages("DBI")
# -
install.packages("DBI")
install.packages("DBI")
library(rJava)
library(RJDBC)
library(DBI)
# MySQL
drv=JDBC(driverClass = "com.mysql.jdbc.Driver",
classPath = "C:\\R_Lecture\\mysql-connector-java-5.1.48-bin.jar")
# R 언어에서 DB 연결
conn <- dbConnect(drv,
"jdbc:mysql://localhost:3306/library",
"data",
"data")
conn
# Query 실행
# SQL:  데이터베이스를 제어하기 위한 언어
sql = "select * from book"
sql
# Query 실행
# SQL:  데이터베이스를 제어하기 위한 언어
sql = "select btitle from book"
# 한 줄을 가져와도 무조건 df 구조로!
df <- dbGetQuery(sql);
# 한 줄을 가져와도 무조건 df 구조로!
df <- dbGetQuery(conn, sql);
head(df)
# Query 실행
# SQL:  데이터베이스를 제어하기 위한 언어
sql = "select * from book"
# 한 줄을 가져와도 무조건 df 구조로!
df <- dbGetQuery(conn, sql);
head(df)
# Query 실행
# SQL:  데이터베이스를 제어하기 위한 언어
sql = "select btitle from book"
# 한 줄을 가져와도 무조건 df 구조로!
df <- dbGetQuery(conn, sql);
head(df)
names(df)
# Query 실행
# SQL:  데이터베이스를 제어하기 위한 언어
sql = "select * from book"
names(df)
# 한 줄을 가져와도 무조건 df 구조로!
df <- dbGetQuery(conn, sql);
head(df)
names(df)
View(df)
library(dplyr)
df %>% filter(bprice > 55000) %>%
select(btitle)
sql = "select btitle from book where bprice>55000"
# 한 줄을 가져와도 무조건 df 구조로!
df <- dbGetQuery(conn, sql);
df
# Selenium을 이용한 동적 페이지 스크래핑
# Selenium을 r에서 사용할 수 있도로 도와주는 패키지 설치해야
install.packages("RSelenium")
library(RSelenium)
# r 프로그램이 Selenium 서버에 접속한 후 remote driver 객체를 return 받음
remDr <- remoteDriver(remoteServerAddr="localhost",
port=4445,
browserName="chrome")
# 접속 성공하면 remote driver를 이용하여 크롬 브라우저를 R code로 제어 가능
# browser open
remDr$open()
# open 된 브라우저의 주소 변경
remDr$navigate("http://localhost:8080/bookSearch/index.html")
# r 프로그램이 Selenium 서버에 접속한 후 remote driver 객체를 return 받음
remDr <- remoteDriver(remoteServerAddr="localhost",
port=4445,
browserName="chrome")
remDr
# 접속 성공하면 remote driver를 이용하여 크롬 브라우저를 R code로 제어 가능
# browser open
remDr$open()
# open 된 브라우저의 주소 변경
remDr$navigate("http://localhost:8080/bookSearch/index.html")
# 2. loading package
library(jsonlite)
library(httr)
# 3. 문자열 처리 위한 package
library(stringr)
url <- "http://localhost:8080/bookSearch/search?keyword="
request_url <- str_c(url,
# what=character() => 문자 입력 받을 것
scan(what=character()))
url <- "http://localhost:8080/bookSearch/search?keyword="
request_url <- str_c(url,
# what=character() => 문자 입력 받을 것
scan(what=character()))
request_url <- URLencode(request_url) # 한글처리
request_url  # 주소 만들어짐
df <- fromJSON(request_url) # eclipse server start 상태여야!!!!!
df
View(df)  # data frame 형태로 새로운 탭에서
str(df)   # structure // data frame 구조 파악
names(df) # col name
# 찾은 도서 제목만 console에 출력력
for(idx in seq(1:nrow(df))) { # nrow() => num row
# df$title # vector 집합 => data frame
print(df$title[idx]) # vector로 하나씩 출력됨
}
